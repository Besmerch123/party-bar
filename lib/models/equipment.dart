import 'package:cloud_firestore/cloud_firestore.dart';
import 'shared_types.dart';

/// Equipment Domain Model (UI/Business Logic Layer)
///
/// Represents a piece of equipment used in cocktail preparation.
/// This is a clean domain entity with translated strings for the UI layer.
/// Following DDD principles, this is the core entity of the Equipment domain.
class Equipment {
  /// Unique identifier (Firebase document ID)
  final String id;

  /// The name/title of the equipment (already translated)
  final I18nField title;

  /// Google Cloud Storage path or URL to the equipment image
  final String? image;

  const Equipment({required this.id, required this.title, this.image});

  Equipment copyWith({String? id, I18nField? title, String? image}) {
    return Equipment(
      id: id ?? this.id,
      title: title ?? this.title,
      image: image ?? this.image,
    );
  }
}

/// Firestore Document representation of Equipment
///
/// Uses I18nField for title to support multiple languages
/// Timestamps are stored as Firestore Timestamps
class EquipmentDocument {
  /// I18n field containing translations for the equipment title
  final I18nField title;

  /// Google Cloud Storage path or URL to the equipment image
  final String? image;

  /// Firestore Timestamp when the equipment was created
  final Timestamp createdAt;

  /// Firestore Timestamp when the equipment was last updated
  final Timestamp updatedAt;

  const EquipmentDocument({
    required this.title,
    this.image,
    required this.createdAt,
    required this.updatedAt,
  });

  /// Convert Firestore document to EquipmentDocument
  factory EquipmentDocument.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return EquipmentDocument.fromMap(data);
  }

  factory EquipmentDocument.fromMap(Map<String, dynamic> map) {
    return EquipmentDocument(
      title: Map<String, String>.from(map['title'] ?? {}),
      image: map['image'],
      createdAt: map['createdAt'] as Timestamp,
      updatedAt: map['updatedAt'] as Timestamp,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'title': title,
      'image': image,
      'createdAt': createdAt,
      'updatedAt': updatedAt,
    };
  }
}

/// Transformer to convert between EquipmentDocument and Equipment entity
class EquipmentTransformer
    extends FirestoreTransformer<EquipmentDocument, Equipment> {
  @override
  Equipment fromDocument(
    EquipmentDocument document,
    String id,
    SupportedLocale locale,
  ) {
    return Equipment(id: id, title: document.title, image: document.image);
  }

  @override
  EquipmentDocument toDocument(Equipment entity) {
    // When creating/updating, you'd typically provide the I18n fields
    // This is a simplified version
    throw UnimplementedError(
      'Use CreateEquipmentDto or UpdateEquipmentDto for writes',
    );
  }

  /// Convert Firestore DocumentSnapshot directly to Equipment entity
  Equipment fromFirestore(
    DocumentSnapshot<EquipmentDocument> doc,
    SupportedLocale locale,
  ) {
    final document = doc.data()!;
    return fromDocument(document, doc.id, locale);
  }
}

/// Data transfer object for creating a new equipment
/// Excludes ID and timestamps as they are generated by the system
class CreateEquipmentDto {
  final String title;
  final String? image;

  const CreateEquipmentDto({required this.title, this.image});

  Map<String, dynamic> toMap() {
    return {'title': title, 'image': image};
  }
}

/// Data transfer object for updating an existing equipment
/// All fields are optional to support partial updates
class UpdateEquipmentDto {
  final String? title;
  final String? image;

  const UpdateEquipmentDto({this.title, this.image});

  Map<String, dynamic> toMap() {
    final map = <String, dynamic>{};
    if (title != null) map['title'] = title;
    if (image != null) map['image'] = image;
    return map;
  }
}
